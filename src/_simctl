#compdef simctl

_simctl() {
  _arguments \
    '--set: :_files -/' \
    '--profiles: :_files -/' \
    ': :_commands' \
    '*:: :_options'
}

_commands() {
  local -a commands
  commands=(
    'help:Prints the usage for a given subcommand.'
    'create:Create a new device.'
    'clone:Clone an existing device.'
    'upgrade:Upgrade a device to a newer runtime.'
    'delete:Delete specified devices, unavailable devices, or all devices.'
    'pair:Create a new watch and phone pair.'
    'unpair:Unpair a watch and phone pair.'
    'pair_activate:Unpair a watch and phone pair.'
    'erase:Erase a device'"'"'s contents and settings.'
    'boot:Boot a device or device pair.'
  )
  _describe subcommand commands
}

_options() {
  case $line[1] in

    (help)
      _arguments ': :_commands'
      ;;

    (create)
      _arguments \
        ':name:' \
        ':device type id:_devicetypes' \
        '::runtime id:{DEVICETYPE=${(Q)words[3]} _runtimes}'
      ;;

    (clone)
      _arguments \
        ':device:{FILTER=available _devices}' \
        ':name:' \
        '::destination device set:_files -/'
      ;;

    (upgrade)
      _arguments \
        ':device:_devices' \
        ':runtime id:{DEVICE=${(Q)words[2]} _runtimes}'
      ;;

    (delete)
      _arguments \
        '*: :{_devices_unavailable; _devices_all; _devices}'
      ;;

    (pair)
      _arguments \
        ':device:{FILTER=watches _devices}' \
        ':device:{FILTER=phones _devices}'
      ;;

    (unpair|pair_activate)
      _arguments \
        ':pair:_pairs'
      ;;

    (erase)
      _arguments \
        '*: :{_devices_all; _devices}'
      ;;

    (boot)
      _arguments \
        ': :{_devices; _pairs}' \
        '--disabledJob=-[Disables the given launchd job.]' \
        '--enabledJob=-[Enables the given launchd job when it would normally be disabled.]'
      ;;

  esac
}

_devicetypes() {
  local -a devicetypes
  devicetypes=(${(f)"$(xcrun simctl list devicetypes -j | jq -r '.devicetypes[].name')"})
  _describe devicetype devicetypes
}

_runtimes() {
  local -a runtimes
  runtimes=(${(f)"$(
    xcrun simctl list -j | jq -r \
      '
      (
        if $ENV.DEVICETYPE | length > 0 then
          $ENV.DEVICETYPE
        elif $ENV.DEVICE | length > 0 then
          first(.devices[][] | select(.udid == $ENV.DEVICE)).deviceTypeIdentifier // ""
        else
          ""
        end
      ) as $devicetype |
      (
        .devicetypes | map(select(
          ((.identifier | ascii_downcase) | contains($devicetype | ascii_downcase))
          or ((.name | ascii_downcase) | contains($devicetype | ascii_downcase))
        )) | INDEX(.identifier)
      ) as $devicetypes
      | .runtimes |= (sort_by([{iOS:"x"}[.platform] // .platform, .buildversion]) | reverse)
      | .runtimes[]
      | select(.isAvailable)
      | select(any($devicetypes[.supportedDeviceTypes[].identifier]; .))
      | "\(.identifier):\(.name) (\(.version) - \(.buildversion))"
    '
    )"})
  _describe -V runtime runtimes
}

_devices() {
  local -a devices
  devices=(${(f)"$(xcrun simctl list -j | jq -r '
      (.devicetypes | INDEX(.identifier)) as $devicetypes
      | (.runtimes | INDEX(.identifier)) as $runtimes
      | .devices |= with_entries(.value[].runtime = $runtimes[.key])
      | .devices[][] |= (.devicetype = $devicetypes[.deviceTypeIdentifier])
      | [.devices[][]] | sort_by(.logPathSize) | reverse[]
      | select(
        if $ENV.FILTER == "available" then
          .isAvailable
        elif $ENV.FILTER == "watches" then
          .devicetype.productFamily == "Apple Watch"
        elif $ENV.FILTER == "phones" then
          .devicetype.productFamily == "iPhone"
        else
          true
        end
      )
      | "\(.udid):\(.name) (\(.devicetype.name // "unknown type"), \(.runtime.name // .availabilityError))"
    ')"})
  _describe -V device devices
}

_devices_all() {
  local -a devices
  devices=(
    all:'All devices'
  )
  _describe -V special devices
}

_devices_unavailable() {
  local -a devices
  devices=(
    unavailable:'Devices not supported by the current Xcode SDK'
  )
  _describe -V special devices
}

_pairs() {
  local -a pairs
  pairs=(${(f)"$(xcrun simctl list pairs -j | jq -r '
    .pairs | to_entries[] |
    "\(.key):\(.value.watch.name) - \(.value.phone.name) \(.value.state)"
  ')"})
  _describe pair pairs
}

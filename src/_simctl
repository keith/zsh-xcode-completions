#compdef simctl

_simctl() {
  _arguments \
    '--set: :_files -/' \
    '--profiles: :_files -/' \
    ': :_commands' \
    '*:: :_options'
}

_commands() {
  local -a commands
  commands=(
    'help:Prints the usage for a given subcommand.'
    'create:Create a new device.'
    'clone:Clone an existing device.'
  )
  _describe subcommand commands
}

_options() {
  case $line[1] in

    (help)
      _arguments ': :_commands'
      ;;

    (create)
      _arguments \
        ':name:' \
        ':device type id:_devicetypes' \
        '::runtime id:{DEVICETYPE=${(Q)words[3]} _runtimes}'
      ;;

    (clone)
      _arguments \
        ':device:_devices' \
        ':name:' \
        '::destination device set:_files -/'
      ;;

  esac
}

_devicetypes() {
  local -a devicetypes
  devicetypes=(${(f)"$(xcrun simctl list devicetypes -j | jq -r '.devicetypes[].name')"})
  _describe devicetype devicetypes
}

_runtimes() {
  local -a runtimes
  runtimes=(${(f)"$(
    xcrun simctl list -j | jq -r --arg devicetype "$DEVICETYPE" '
      (
        .devicetypes | map(select(
          ((.identifier | ascii_downcase) | contains($devicetype | ascii_downcase))
          or ((.name | ascii_downcase) | contains($devicetype | ascii_downcase))
        )) | INDEX(.identifier)
      ) as $devicetypes
      | .runtimes |= (sort_by([{iOS:"x"}[.platform] // .platform, .buildversion]) | reverse)
      | .runtimes[]
      | select(.isAvailable)
      | select(any($devicetypes[.supportedDeviceTypes[].identifier]; .))
      | "\(.identifier):\(.name) (\(.version) - \(.buildversion))"
    '
    )"})
  _describe -V runtime runtimes
}

_devices() {
  local -a devices
  devices=(${(f)"$(xcrun simctl list -j | jq -r '
    (.devicetypes | INDEX(.identifier)) as $devicetypes
    | (.runtimes | INDEX(.identifier)) as $runtimes
    | .devices |= with_entries(.value[].runtime = .key)
    | [.devices[][]] | sort_by(.logPathSize) | reverse[]
    | "\(.udid):\(.name) (\($devicetypes[.deviceTypeIdentifier].name // "unknown type"), \($runtimes[.runtime].name // .availabilityError))"
    ')"})
  _describe -V device devices
}

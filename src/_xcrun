#compdef xcrun

_sdks() {
  local -a sdks
  sdks=$(xcodebuild -showsdks 2>/dev/null | grep -o "\-sdk.*" | sed -E 's/.* ([a-z]+).*/\1/' | uniq)
  echo $sdks
}

_arguments \
  '(-f --find)'{-f,--find}'[Find and print tool path]' \
  '(-h --help)'{-h,--help}'[Show help]' \
  '(-k --kill-cache)'{-k,--kill-cache}'[Invalidate existing cache]' \
  '(-l --log)'{-l,--log}'[Show commands to be executed]' \
  '(-n --no-cache)'{-n,--no-cache}'[Do not use lookup cache]' \
  '(-r --run)'{-r,--run}'[Execute tool (default)]' \
  '(-v --verbose)'{-v,--verbose}'[Show verbose output]' \
  '(-)1: :->executables' \
  '*:: : _normal' \
  '--sdk[Specify SDK]:SDKs:->sdks' \
  '--show-sdk-path[Show selected SDK path]' \
  '--show-sdk-platform-path[Show selected SDK platform path]' \
  '--show-sdk-platform-version[Show selected SDK platform version]' \
  '--show-sdk-version[Show selected SDK version]' \
  '--toolchain[Specify toolchain]:Toolchains:->toolchains' \
  '--version[Print version]'

case "$state" in
  executables)
    PATH="$(dirname "$(xcrun -f swift)")":"$(dirname "$(xcrun -f simctl)")" _command_names -e
    ;;
  sdks)
    if ([[ ${+installed_sdks_platforms} -eq 0 ]] || _cache_invalid SDK_PLATFORMS) && ! _retrieve_cache SDK_PLATFORMS; then
      installed_sdks_platforms=($(_sdks))
      _store_cache SDK_PLATFORMS installed_sdks_platforms
    fi

    if [[ $installed_sdks_platforms != "" ]]; then
      _values "SDK to use" $installed_sdks_platforms
    fi
    ;;
  toolchains)
    toolchains=(/Applications/Xcode*.app/Contents/Developer/Toolchains/*.xctoolchain)
    if [[ $toolchains != "" ]]; then
      _values "Toolchain" $toolchains
    fi
    ;;
esac

xcrun simctl || true
usage: simctl [--set <path>] [--profiles <path>] <subcommand> ...
       simctl help [subcommand]
Command line utility to control the Simulator

For subcommands that require a <device> argument, you may specify a device UDID
or the special "booted" string which will cause simctl to pick a booted device.
If multiple devices are booted when the "booted" device is selected, simctl
will choose one of them.

Subcommands:
	create              Create a new device.
	clone               Clone an existing device.
	upgrade             Upgrade a device to a newer runtime.
	delete              Delete specified devices, unavailable devices, or all devices.
	pair                Create a new watch and phone pair.
	unpair              Unpair a watch and phone pair.
	pair_activate       Set a given pair as active.
	erase               Erase a device's contents and settings.
	boot                Boot a device or device pair.
	shutdown            Shutdown a device.
	rename              Rename a device.
	getenv              Print an environment variable from a running device.
	openurl             Open a URL in a device.
	addmedia            Add photos, live photos, videos, or contacts to the library of a device.
	install             Install an app on a device.
	uninstall           Uninstall an app from a device.
	get_app_container   Print the path of the installed app's container
	install_app_data    Install an xcappdata package to a device, replacing the current contents of the container.
	launch              Launch an application by identifier on a device.
	terminate           Terminate an application by identifier on a device.
	spawn               Spawn a process by executing a given executable on a device.
	list                List available devices, device types, runtimes, or device pairs.
	icloud_sync         Trigger iCloud sync on a device.
	pbsync              Sync the pasteboard content from one pasteboard to another.
	pbcopy              Copy standard input onto the device pasteboard.
	pbpaste             Print the contents of the device's pasteboard to standard output.
	help                Prints the usage for a given subcommand.
	io                  Set up a device IO operation.
	diagnose            Collect diagnostic information and logs.
	logverbose          enable or disable verbose logging for a device
	status_bar          Set or clear status bar overrides
	ui                  Get or Set UI options
	push                Send a simulated push notification
	privacy             Grant, revoke, or reset privacy and permissions
	keychain            Manipulate a device's keychain

xcrun simctl help help
Prints the usage for a given subcommand.
Usage: simctl help <subcommand>

xcrun simctl help create
Create a new device.
Usage: simctl create <name> <device type id> [<runtime id>]

	<device type id>    A valid available device type. Find these by running "xcrun simctl list devicetypes".
	                    Examples: ("iPhone X", "com.apple.CoreSimulator.SimDeviceType.iPhone-X")
	<runtime id>        A valid and available runtime. Find these by running "xcrun simctl list runtimes".
	                    If no runtime is specified the newest runtime compatible with the device type is chosen.
	                    Examples: ("watchOS3", "watchOS3.2", "watchOS 3.2", "com.apple.CoreSimulator.SimRuntime.watchOS-3-2",
	                               "/Volumes/path/to/Runtimes/watchOS 3.2.simruntime")


xcrun simctl help clone
Clone an existing device.
Usage: simctl clone <device> <new name> [<destination device set>]

xcrun simctl help upgrade
Upgrade a device to a newer runtime.
Usage: simctl upgrade <device> <runtime id>

xcrun simctl help delete
Delete specified devices, unavailable devices, or all devices.
Usage: simctl delete <device> [... <device n>] | unavailable | all

Specifying unavailable will delete devices that are not supported by the current Xcode SDK.


xcrun simctl help pair
Create a new watch and phone pair.
Usage: simctl pair <watch device> <phone device>

xcrun simctl help unpair
Unpair a watch and phone pair.
Usage: simctl unpair <pair UUID>

xcrun simctl help pair_activate
Set a given pair as active.
Usage: simctl pair_activate <pair>

xcrun simctl help erase
Erase a device's contents and settings.
Usage: simctl erase <device> [... <device n>] | all

Specifying all will erase all existing devices.

xcrun simctl help boot
Boot a device or device pair.
Usage: simctl boot <device> [--disabledJob=<job>] [--enabledJob=<job>]

	--disabledJob=<job>     Disables the given launchd job. Multiple jobs can be disabled by passing multiple flags.
	--enabledJob=<job>      Enables the given launchd job when it would normally be disabled.
	                        Multiple jobs can be enabled by passing multiple flags.


If you want to set environment variables in the resulting environment, set them in the calling environment with a SIMCTL_CHILD_ prefix.

xcrun simctl help shutdown
Shutdown a device.
Usage: simctl shutdown <device> | all

Specifying all will shut down all running devices

xcrun simctl help rename
Rename a device.
Usage: simctl rename <device> <name>

xcrun simctl help getenv
Print an environment variable from a running device.
Usage: simctl getenv <device> <variable name>

xcrun simctl help openurl
Open a URL in a device.
Usage: simctl openurl <device> <URL>

xcrun simctl help addmedia
Add photos, live photos, videos, or contacts to the library of a device.
Usage: simctl addmedia <device> <path> [... <path>]

You can specify multiple files including a mix of photos, videos, and contacts.

You can also specify multiple live photos by providing the photo and video files. They will automatically be discovered and imported correctly.

Contacts support the vCard format.

xcrun simctl help install
Install an app on a device.
Usage: simctl install <device> <path>

xcrun simctl help uninstall
Uninstall an app from a device.
Usage: simctl uninstall <device> <app bundle identifier>

xcrun simctl help get_app_container
Print the path of the installed app's container
Usage: simctl get_app_container <device> <app bundle identifier> [<container>]

container   Optionally specify the container. Defaults to app.
  app                 The .app bundle
  data                The application's data container
  groups              The App Group containers
  <group identifier>  A specific App Group container



xcrun simctl help install_app_data
Install an xcappdata package to a device, replacing the current contents of the container.
Usage: simctl install_app_data <device> <path to xcappdata package>
	 This will replace the current contents of the container. If the app is currently running it will be terminated before the container is replaced.

xcrun simctl help launch
Launch an application by identifier on a device.
Usage: simctl launch [-w | --wait-for-debugger] [--console|--console-pty] [--stdout=<path>] [--stderr=<path>] [--terminate-running-process] <device> <app bundle identifier> [<argv 1> <argv 2> ... <argv n>]

	--console Block and print the application's stdout and stderr to the current terminal.
		Signals received by simctl are passed through to the application.
		(Cannot be combined with --stdout or --stderr)
	--console-pty Block and print the application's stdout and stderr to the current terminal via a PTY.
		Signals received by simctl are passed through to the application.
		(Cannot be combined with --stdout or --stderr)
	--stdout=<path> Redirect the application's standard output to a file.
	--stderr=<path> Redirect the application's standard error to a file.
	--terminate-running-process Terminate any running copy of the application.
		Note: Log output is often directed to stderr, not stdout.

If you want to set environment variables in the resulting environment, set them in the calling environment with a SIMCTL_CHILD_ prefix.

xcrun simctl help terminate
Terminate an application by identifier on a device.
Usage: simctl terminate <device> <app bundle identifier>

xcrun simctl help spawn
Spawn a process by executing a given executable on a device.
Usage: simctl spawn [-w | --wait-for-debugger] [-s | --standalone] [-a <arch> | --arch=<arch>] <device> <path to executable> [<argv 1> <argv 2> ... <argv n>]

The path to the executable is searched using the following rules:
   <path> contains no / characters: search the device's $PATH. This is similar to how most shells work, but searches the device's path instead of the host's path.
   <path> starts with /: Assume a literal path to the binary. This must start from the host's root.
   <path> contains non-leading / characters: search relative to the current directory first, then relative to the device's $SIMULATOR_ROOT.

If you want to set environment variables in the resulting environment, set them in the calling environment with a SIMCTL_CHILD_ prefix.

xcrun simctl help list
List available devices, device types, runtimes, or device pairs.
Usage: simctl list [-j | --json] [-v] [devices|devicetypes|runtimes|pairs] [<search term>|available]
-j     Print as JSON
-v     More verbose output

Specify one of 'devices', 'devicetypes', 'runtimes', or 'pairs' to list only items of that type. If a type filter is specified you may also specify a search term. Search terms use a simple case-insensitive contains check against the item's description. You may use the search term 'available' to only list available items.


xcrun simctl help icloud_sync
Trigger iCloud sync on a device.
Usage: simctl icloud_sync <device>

xcrun simctl help pbsync
Sync the pasteboard content from one pasteboard to another.
Usage: simctl pbsync [-pv] <source device or "host"> <destination device or "host">

 -p causes simctl to use promise data for secondary types.  simctl will continue to run to provide that promise data until something else replaces it on the pasteboard.

xcrun simctl help pbcopy
Copy standard input onto the device pasteboard.
Usage: simctl pbcopy [-v] <device or "host">

xcrun simctl help pbpaste
Print the contents of the device's pasteboard to standard output.
Usage: simctl pbpaste [-v] <device or "host">
